// Prisma schema for e-commerce database
// Defines all models and relationships

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and orders
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // bcrypt hashed
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cartItems     CartItem[]
  orders        Order[]
  userBehaviors UserBehavior[]

  @@map("users")
}

// Product model matching frontend Product type
model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  price       Int      // in cents (e.g., 49900 = $499.00)
  tags        String[]
  stock       Int      @default(0)
  rating      Float    @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems  CartItem[]
  orderItems OrderItem[]
  behaviors  UserBehavior[]

  @@index([slug])
  @@index([price])
  @@index([rating])
  @@map("products")
}

// Shopping cart items
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("cart_items")
}

// Order model
model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Int         // total amount in cents
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

// Order items (snapshot of products at time of purchase)
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int      // price at time of purchase (cents)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@map("order_items")
}

// User behavior tracking for AI recommendations
model UserBehavior {
  id        String     @id @default(cuid())
  userId    String
  productId String
  action    ActionType
  createdAt DateTime   @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId, action])
  @@index([productId, action])
  @@map("user_behaviors")
}

// Enums
enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ActionType {
  VIEW
  ADD_TO_CART
  PURCHASE
}
